import os
import json
import tempfile
import subprocess

from .c_tokenizer import CTokenizer

################## CONFIG #######################
IDA_PATH = "/home/kylebot/src/ida/ida-7.5sp2-py38-tokenizer"
BEGIN_BANNER = "===================================IDA SCRIPT START============================================="
END_BANNER = "===================================IDA SCRIPT END============================================="


################## INIT #######################
IDA_BIN = os.path.join(IDA_PATH, "ida64")
SCRIPT_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), "utils", "idascript.py")
assert os.path.exists(IDA_PATH), f"IDA_PATH: {IDA_PATH} does not exists"

# make sure IDA is runnable
output = subprocess.getoutput("ps aux | grep ./lmgrd | grep -v grep")
assert "lmgrd" in output, "Launch your License Manager Daemon for IDA first."

class CTreeTokenizer:
    def __init__(self):
        self.ctokenizer = CTokenizer()

    def _extract_func_info(self, bin_path, func_name):
        # run IDA to extract its log
        cmd = [IDA_BIN, '-B', '-S'+SCRIPT_PATH, os.path.abspath(bin_path)]
        with tempfile.NamedTemporaryFile(mode='r', dir="/tmp", prefix='ctree_tokenizer-') as f:
            log_name = f.name
            env = os.environ
            env["IDALOG"] = f.name
            subprocess.run(cmd, env=env)
            assert os.path.getsize(log_name) != 0, cmd
            content = f.read()

        # locate the log generated by out idascript.py
        assert BEGIN_BANNER in content and END_BANNER in content, content
        output = content.split(BEGIN_BANNER)[1].split(END_BANNER)[0]

        # locate the json output
        lines = output.splitlines()
        idx = lines.index('JSON:')
        info = json.loads(lines[idx+1])
        data = info['data']
        print(f"elapse in {info['time']} seconds")

        # now return the decompiled code
        assert func_name in data, f"{func_name} does not exists in the binary {bin_path}!"
        return data[func_name]

    def tokenize(self, bin_path, func_name):
        info = self._extract_func_info(bin_path, func_name)
        code = info['code']
        return self.ctokenizer.tokenize(code)

    def detokenize(self, tokens):
        return self.ctokenizer.detokenize(tokens)

if __name__ == "__main__":
    tokenizer = CTreeTokenizer()
    tokenizer.tokenize("tests/exec_files/test_1", "main")
