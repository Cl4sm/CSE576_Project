######### THOUGHTS	######### 
We include this case to show how our decompilation has changed as our pipeline improves.

Example of how our model transforms an unwieldy if/do-while loop in
the decompiled code into the more readable while loop that closely
resembles the original

The original hypothesis worked well, we show that our changes to the model
do not negatively impact previous improves made to readability in
terms of code structure.

######### INPUT	######### 

void __fastcall func_1 ( global_var_0 * arg_1 ) { 
	global_var_0 * global_var_1; 
	if ( arg_1 ) { 
		do { 
			global_var_1 = arg_1 -> next; 
			free ( arg_1 ); 
			arg_1 = global_var_1; 
		} while ( global_var_1 ); 
	} 
} 


######### OLD HYPOTHESIS ######### 

void func_2 ( global_var_0 * arg_1 ) {
	global_var_0 * global_var_1; 
	while ( arg_1 )	{
		global_var_1 = arg_1 -> next; 
		func_1 ( arg_1 ); 
		arg_1 = global_var_1; 
	}
}


######### LATEST HYPOTHESIS ######### 

void func_0 ( void ) {
 	global_var_0 * var_0;
	while ( var_0 != global_var_2 ) {
  		var_0 = var_0 -> attr_0;
  		func_1 ( var_0 );
   		var_0 = var_0 -> attr_1;
   }
}


######### ORIGINAL	######### 
void func_2 ( struct dep * arg_1 ) {
	while ( arg_1 != 0 ) {
		struct dep * var_1 = arg_1; 
		arg_1 = arg_1 -> next; 
		func_1 ( var_1 ); 
	}
} 